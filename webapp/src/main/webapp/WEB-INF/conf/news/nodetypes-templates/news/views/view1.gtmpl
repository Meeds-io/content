<%
  import org.apache.commons.lang.StringEscapeUtils;

  import org.exoplatform.ecm.jcr.model.VersionNode;

  import org.exoplatform.portal.webui.util.Util;
  import org.exoplatform.social.core.identity.model.Identity;
  import org.exoplatform.social.core.identity.provider.OrganizationIdentityProvider;
  import org.exoplatform.social.core.service.LinkProvider;


  import org.exoplatform.commons.utils.CommonsUtils;
  import org.exoplatform.social.webui.Utils;
  import org.exoplatform.social.core.manager.IdentityManager;
  import org.exoplatform.news.NewsService;

  import javax.jcr.RepositoryException;

  import java.time.format.DateTimeFormatter;
  import java.time.format.FormatStyle;
  import java.time.LocalDateTime;
  import java.util.TimeZone;
  import java.util.Date;
  import java.util.Comparator;

  import groovy.json.JsonOutput;

  public String getProfileFullName(String userName) {
    String profileFullName = "";
    Identity identity = org.exoplatform.social.webui.Utils.getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME, userName, true);
    if(identity != null && identity.getProfile() != null) {
      profileFullName = identity.getProfile().getFullName();
    }
    return StringEscapeUtils.escapeHtml(profileFullName);
  }

  private Date getPublicationDate(def node) throws RepositoryException {
    def originalNode = node;
    if (node.isNodeType("nt:frozenNode")) {
      String uuid = node.getProperty("jcr:frozenUuid").getString();
      originalNode = node.getSession().getNodeByUUID(uuid);
    }
    VersionNode versionNode = new VersionNode(originalNode, originalNode.getSession());
    List<VersionNode> versions = versionNode.getChildren();
    if(versions.size() > 1) {
      versions.sort(new Comparator<VersionNode>() {
        @Override
        public int compare(VersionNode o1, VersionNode o2) {
          return Integer.parseInt(o1.getName()) - Integer.parseInt(o2.getName());
        }
      });
      return versions.get(1).getCreatedTime().getTime();
    }

    return null;
  }

  NewsService newsService = CommonsUtils.getService(NewsService.class);

  def pcontext = Util.getPortalRequestContext();

  def newsNode = uicomponent.getNode();

  def news = newsService.convertNodeToNews(newsNode);

  def activityId = "";
  if (news.activities) {
    def originalSpaceIdActivityId = news.activities.split(";")[0];
    if (originalSpaceIdActivityId != null) {
      def originalActivityId = originalSpaceIdActivityId.split(":")[1];
      if (originalActivityId != null) {
        activityId = originalActivityId;
      }
    }
  }

  StringBuffer illustrationURL = new StringBuffer();
  if(news.illustration != null) {
    illustrationURL.append("/rest/v1/news/").append(news.id).append("/illustration");
  } else {
    illustrationURL.append("/news/images/newsImageDefault.png");
  }

  def authorFullName = getProfileFullName(news.author);
  def updaterFullName = news.author.equals(news.updater) ? authorFullName : getProfileFullName(news.updater);
  def authorProfileURL = LinkProvider.getUserProfileUri(news.author);
  def updaterProfileURL = news.author.equals(news.updater) ? authorProfileURL : LinkProvider.getUserProfileUri(news.updater);
  def mediumDateFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM, FormatStyle.SHORT).withLocale(pcontext.getLocale());
  def newsPostedDate = "";
  def newsPublicationDate = getPublicationDate(newsNode);
  if(newsPublicationDate != null) {
    def postedDate = LocalDateTime.ofInstant(newsPublicationDate.toInstant(), TimeZone.getDefault().toZoneId());
    newsPostedDate = postedDate.format(mediumDateFormat);
  }
  def updatedDate = LocalDateTime.ofInstant(news.updateDate.toInstant(), TimeZone.getDefault().toZoneId());
  def newsUpdatedDate = updatedDate.format(mediumDateFormat);

  def newsTitle = news.title.replaceAll("'", "\\\\'").replaceAll("</script", "</scr\\\\ipt");
  def newsSummary = news.summary.replaceAll("`", "\\\\`").replaceAll("</script", "</scr\\\\ipt");
  def newsBody = news.body.replaceAll("`", "\\\\`");
  def newsAttachments = news.attachments;

  def showEditButton = newsService.canEditNews(news.author, news.spaceId);
  def showPinInput = newsService.canPinNews();

  def params = """ {
    activityId: '${activityId}',
    newsId: '${news.id}',
    news: {
      title: '${newsTitle}',
      summary: `${newsSummary}`,
      pinned: ${news.pinned},
      body: `${newsBody}`,
      illustrationURL: '${illustrationURL}',
      attachments: ${JsonOutput.toJson(newsAttachments)},
      authorFullName: '${authorFullName}',
      authorProfileURL: '${authorProfileURL}',
      postedDate: '${newsPostedDate}',
      updaterFullName: '${updaterFullName}',
      updaterProfileURL: '${updaterProfileURL}',
      updatedDate: '${newsUpdatedDate}',
      id: '${news.id}',
    },
    showEditButton: $showEditButton,
    showPinInput: $showPinInput,
  } """

  def jsManager = pcontext.getJavascriptManager().require("SHARED/uiForm");
  jsManager.require("SHARED/jquery", "jq")
             .require("SHARED/bts_tooltip").addScripts("jq('*[rel=\"tooltip\"]').tooltip();")
             .require("SHARED/newsDetails", "newsDetails").addScripts("newsDetails.init($params);");

%>

<div>
  <!-- The following bloc is needed in order to display the pin confirmation popup when acceding to news details from news app -->
  <!--begin -->
  <div class="uiPopupWrapper UISocialConfirmation" style="display: none;">
    <div class="UIPopupWindow UIDragObject uiPopup " style="width: 550px;">
      <div class="popupHeader clearfix">
        <a class="uiIconClose pull-right" title="Close"></a>
        <span class="PopupTitle popupTitle"></span>
      </div>
      <div class="PopupContent popupContent">
        <ul class="singleMessage popupMessage resizable">
          <li>
            <span class="confirmationIcon contentMessage"></span>
          </li>
        </ul>
        <div class="uiAction uiActionBorder"></div>
      </div>
    </div>
  </div>
  <!-- end -->
  <div id="newsDetails"></div>
</div>
